{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30918,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import streamlit as st\nimport pickle\nimport numpy as np\n\nmodel = pickle.load(open(\"model.pickel\", \"rb\"))\n\n\nst.title(\"Car price Prediction\")\n\n\n#select Brand \nBrand = st.selectbox(\"Brand; \", ['Kia', 'Bmw','Chevrolet','Audi','Mercedes','Volkswagen','Hyundai','Ford','Honda',])\nBrand_mapping = {'Kia': 0, 'Bmw': 1,'Chevrolet': 2,'Audi': 3,'Mercedes': 4,'Volkswagen': 5,'Hyundai': 6,'Ford': 7,'Honda': 9,}\nBrand_value = Brand_mapping.get(Brand)\n\n\n#select Model\nModel = st.selectbox(\"Model; \",['Rio','Malibu','GLA','q5','Golf','Carmy','Civic','Sportage','RAV4','5 Series','CR-v','Elantra','Tiagun','Explorer','A3','3 Series','Tuscon','Passat','Impala','Corolla','Optima','Fiesta','A4','Focus','E-class','sonata','C-class','X5','Accord'])\nModel_mapping = {'Rio': 0,'Malibu': 1,'GLA': 2,'q5': 3,'Golf': 4,'Carmy': 5,'Civic': 6,'Sportage': 7,'RAV4': 8,'5 Series': 9,'CR-v': 10,'Elantra': 11,'Tiagun': 12,'Explorer': 13,'A3': 14,'3 Series': 15,'Tuscon': 16,'Passat': 17,'Impala': 18,'Corolla': 19,'Optima': 20,'Fiesta': 21,'A4': 22,'Focus': 23,'E-class': 24,'sonata': 25,'C-class': 26,'X5': 27,'Accord': 28}\nModel_value = Model_mapping.get(Model)\n\n\n#Year of the car\nyear =st.text_input(\"Year\",key='1')\n\n#engine size\nEng_Size= st.text_input(\"engine size\",key='2')\n\n#Fuel type\n\nFuel_Type= st.selectbox(\"Fuel_Type\",['Diesel','petrol','Hybrid',\"Electric\"])\nFuel_Type_mapping = {'Diesel': 0,'petrol': 1,'Hybrid': 2,\"Electric\": 3}\nFuel_Type_value = Fuel_Type_mapping.get(Fuel_Type)\n\n#Transmission\nTransmission= st.selectbox(\"Transmission\",['Automatic','Manual','Semi-Automatic'])\nTransmission_mapping = {'Automatic': 0,'Manual': 1,'Semi-Automatic': 2}\nTransmission_value = Transmission_mapping.get(Transmission)\n\n#Mieage\nMileage= st.text_input(\"Mileage\",key='3')\n\n#select doors\nDoors= st.selectbox(\"Doors\",['2','3','4','5'])\n#Owners\nOwners= st.selectbox(\"Owners\",['1','2','3','4','5'])\ntry:\n    year = int(year) if year.isdigit() else 0\nexcept ValueError:\n    year = 0\n\ntry:\n    Eng_Size = float(Eng_Size) if Eng_Size.replace('.', '', 1).isdigit() else 0.0\nexcept ValueError:\n    Eng_Size = 0.0\n\ntry:\n    Mileage = float(Mileage) if Mileage.replace('.', '', 1).isdigit() else 0.0\nexcept ValueError:\n    Mileage = 0.0\n\nBrand_value = Brand_mapping.get(Brand)\nModel_value = Model_mapping.get(Model)\nFuel_Type_value = Fuel_Type_mapping.get(Fuel_Type)\nTransmission_value = Transmission_mapping.get(Transmission)\nDoors_value = int(Doors)  # Doors are expected to be an integer\nOwners_value = int(Owners)  # Owners are expected to be an integer\nif st.button(\"click\"):\n    # Assuming Fuel_Type_value and Transmission_value have already been assigned based on the selected values\n    inp = np.array([[Brand_value, Model_value, year, Eng_Size, Fuel_Type_value, Transmission_value, Mileage, Doors_value, Owners_value]])\n\n\n    prediction = model.predict(inp)\n    print(prediction)\n    st.success(f\"Price: ${prediction[0] : .2F}\")","metadata":{"_uuid":"739c4bd6-c664-409b-9ee0-632ea351f409","_cell_guid":"0a42a393-019a-473b-bd03-50dbeba4ae93","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false}},"outputs":[],"execution_count":null}]}